from openseespy.opensees import *
import os

# Model Build
wipe()
if not os.path.exists('./output'):
    os.mkdir('./output')
model('basic', '-ndm', 2, '-ndf', 2)
node(1, 0.0, 0.0)
node(2, 144.0, 0.0)
node(3, 168.0, 0.0)
node(4, 72.0, 96.0)
fix(1, 1, 1)
fix(2, 1, 1)
fix(3, 1, 1)
uniaxialMaterial('Elastic', 1, 3000.0)
element('Truss', 1, *[1, 4], 10.0, 1)
element('Truss', 2, *[2, 4], 5.0, 1)
element('Truss', 3, *[3, 4], 5.0, 1)
recorder('Node', '-file', './output/disp_4.txt', '-time', '-node', 4, '-dof', 1, 2, 'disp')
recorder('Node', '-file', './output/reaction_1.txt', '-time', '-node', 1, '-dof', 1, 2, 'reaction')
recorder('Node', '-file', './output/reaction_2.txt', '-time', '-node', 2, '-dof', 1, 2, 'reaction')
recorder('Node', '-file', './output/reaction_3.txt', '-time', '-node', 3, '-dof', 1, 2, 'reaction')
timeSeries('Linear', 1)
pattern('Plain', 1, 1)
load(4, 100.0, -50)
# Compute Analysis
constraints('Transformation')
numberer('RCM')
system('BandGeneral')
test('NormDispIncr', 1.0e-6, 6, 0)
algorithm('Newton')
integrator('LoadControl', 0.1)
analysis('Static')
analyze(10)
print('Static Analysis Completes')
wipeAnalysis()
loadConst('-time', 0.0)
mass(4, 100.0, 100.0)
timeSeries('Path', 2, '-dt', 0.01, '-filePath', './elcentro.txt')
pattern('UniformExcitation', 2, 1, '-accel', 2)
constraints('Transformation')
numberer('RCM')
system('BandSPD')
test('NormDispIncr', 1.0e-4, 6, 0)
algorithm('Newton')
integrator('Newmark', 0.5, 0.25)
analysis('Transient')
analyze(2000, 0.01)
print('Dynamic Analysis Completes')

